name: Package AppImage
description: Package Helium as AppImage and tar.xz, upload artifacts

runs:
  using: composite
  steps:
    - uses: docker/setup-buildx-action@v3

    - name: Download build cache
      uses: actions/download-artifact@v4
      with:
        name: build-cache-${{ env.ARCH }}
        path: .github/cache/

    - name: Import build cache
      shell: bash
      run: bash ./.github/scripts/import-cache.sh

    - name: Package as AppImage with Docker
      shell: bash
      run: bash ./package/docker-package.sh

    - name: Sign the AppImage with Docker
      # maintainers need to set GPG_PRIVATE_KEY and GPG_PASSPHRASE as repository secrets
      # assumes you set a passphrase for the key because that's good practice
      if: ${{ env.GPG_PRIVATE_KEY != '' && env.GPG_PASSPHRASE != '' }}
      shell: bash
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        # this NEEDS to be the same as the image in .github/workflows/build-steps.yml
        DOCKER_IMAGE: chromium-builder:trixie-slim
      run: |
        APPIMAGE_FILE=$(find build/release -name "*.AppImage" -type f)
        if [ -z "$APPIMAGE_FILE" ]; then
          echo "AppImage file not found!"
          exit 1
        fi

        docker run --rm \
          -e GPG_PRIVATE_KEY -e GPG_PASSPHRASE \
          -v "$(pwd):/repo" "$DOCKER_IMAGE" bash -c 'echo "$GPG_PRIVATE_KEY" | gpg --batch --import --passphrase "$GPG_PASSPHRASE" && appimagetool --sign "'"$APPIMAGE_FILE"'" --updateinformation "gh-releases-zsync|imputnet|helium-linux|latest|helium-*-${{ env.ARCH }}.AppImage.zsync"'

    - name: List build artifacts
      shell: bash
      run: ls -la build

    - name: Get version info
      id: version
      shell: bash
      run: |
        helium_version=$(python3 "helium-chromium/utils/helium_version.py" --tree "helium-chromium/" --platform-tree "." --print)
        echo "version=${helium_version}" >> $GITHUB_OUTPUT

    - name: Upload AppImage artifact
      uses: actions/upload-artifact@v4
      with:
        name: helium-${{ steps.version.outputs.version }}-${{ env.ARCH }}-AppImage
        path: build/release/helium-${{ steps.version.outputs.version }}-${{ env.ARCH }}.AppImage*
        if-no-files-found: error
        compression-level: 0

    - name: Upload tar.xz artifact
      uses: actions/upload-artifact@v4
      with:
        name: helium-${{ steps.version.outputs.version }}-${{ env.ARCH }}-linux
        path: build/release/helium-${{ steps.version.outputs.version }}-${{ env.ARCH }}_linux.tar.xz
        if-no-files-found: error
        compression-level: 0
